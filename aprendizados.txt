O SQLModel usa o nome das classes que declaramos como tabel = True para o nome das tabelas 
ex:
class Personagem => o nome da tabela sera personagem 
Evento => evento 
E assim por diante...

Caso quissese dar um nome a tabela diferente da classe usaria 
class Personagem(SQLModel, table=True):
    __tablename__ = "herois"  => aqui voce coloca o nome que deseja dar a tabela 


✨ Dicas rápidas para não esquecer:
Relationship(...): é o elo com outra tabela. Ele te dá acesso ao(s) objeto(s) relacionados.

back_populates="...": sempre aponta pro nome do campo do outro lado da conexão (espelho da relação).

List[...]: indica que o campo guarda vários registros relacionados (porque o relacionamento é do tipo N:N).

Optional[...] + = None (em outros campos): permitem que aquele campo seja preenchido ou não — ou seja, não obrigatório.


✅ 1. O Relationship funciona sem o campo personagem_id?
Tecnicamente, não. O Relationship precisa de uma foreign key pra funcionar corretamente. Ele não faz mágica sozinho — ele depende da chave estrangeira declarada com Field(foreign_key=...) pra saber como conectar as tabelas.

Exemplo:

personagem_id: int = Field(foreign_key="personagem.id")

Essa linha:

Cria o vínculo entre a tabela atual e a tabela personagem

Permite que o Relationship(...) entenda: “Ah! Esse ID aqui corresponde ao id lá na tabela personagem.”

🔁 Ou seja: > O Relationship sozinho não conecta nada sem a presença da chave estrangeira (ForeignKey).

Nem sempre precisamos usar o back_populates no entanto faz muito mais sentido usar pois ele permite que possamos navegar de um lado para o outro nas 
tabelas assim as consultas ficam mais consistentes 



🧱 O que é Field() afinal?
O Field() é uma função fornecida pelo SQLModel (que na real vem do Pydantic/SQLAlchemy) que permite configurar detalhes extras de um campo, como:

Torná-lo uma chave primária

Definir valores padrão

Adicionar validações, restrições, descrições

Dizer que aquele campo é uma foreign key (chave estrangeira)

🛠️ Já campos simples como nome: str, historia: Optional[str]...
Esses são campos que não precisam de nada especial além do tipo. Então podem ser declarados direto, sem o Field(). Exemplo:

python
nome: str  # Simples, obrigatório
historia: Optional[str] = None  # Opcional, com valor padrão
O SQLModel já entende o tipo, se é obrigatório ou não, e qual é o valor padrão só por essa sintaxe.

Tipo de campo	Precisa de Field()?	Por quê?
Simples, como str, int	❌ Não	O tipo + valor padrão já são suficientes
Chave primária	✅ Sim	Precisa dizer que é primary_key=True
Chave estrangeira	✅ Sim	Precisa de foreign_key="..."
Quer definir metadata extra	✅ Sim	Ex: description=, max_length=, etc



Porque usamos o default = None na criação de primary keys
1. 🧠 O id é gerado automaticamente pelo banco
Quando usamos primary_key=True no SQLModel e não passamos valor para o id ao criar o objeto, o banco de dados cuida disso pra gente (auto-incremento).

Mas o Python precisa receber algum valor ali na criação do objeto, e se não tiver = None, ele vai reclamar que está faltando o campo.

➡️ Por isso dizemos: "Este campo é opcional e começa como None, porque o banco vai preenchê-lo pra mim."




Os SCHEMAS:
schemas = Camadas de validação e entrada/saída de dados
Entrada de dados (POST)	Define o que o usuário pode ou deve enviar ao cadastrar algo
Saída de dados (GET)	Define o que a API devolve ao listar/mostrar um objeto
schemas = Camadas de validação e entrada/saída de dados


DEPENDS
Pega uma função e seu retorno e passa como parametro em uma outra função 

SESSION
session : Session é so para indicar que session é do tipo sessão 
⚡ Resumo mágico:
Parte do código	O que faz?
Depends(get_session)	Chama a função get_session() e injeta o resultado
session: Session = Depends(...)	Diz: “esse parâmetro vai receber algo do tipo Session”



🌐 Estrutura da API com FastAPI + SQLModel
🔧 Arquitetura
models/: Onde ficam os modelos do banco (com table=True)

schemas/: Modelos de entrada/saída com BaseModel (validação e controle)

routes/: Arquivos com as rotas da API (agrupadas por recurso)

database.py: Onde é criada a engine e a função get_session()

main.py: Ponto inicial da aplicação (instância do FastAPI, rotas, criação do banco)

🧱 SQLModel e Field(...)
Field(...) é usado quando:

Define PK: primary_key=True

Define FK: foreign_key="tabela.coluna"

Define valor padrão ou metadados extras (default=, description=, etc)

Exemplo:

python
id: Optional[int] = Field(default=None, primary_key=True)
🔗 Relacionamentos (Relationship())
✔️ Um-para-muitos e Muitos-para-muitos:
Use Relationship() com back_populates espelhando o nome do campo do outro lado.

✔️ Quando há duas FKs para a mesma tabela:
Use sa_relationship_kwargs={"foreign_keys": "[Classe.campo]"} para evitar ambiguidade.

🧠 Injeção de Dependências com Depends
O que é?
O FastAPI chama automaticamente funções auxiliares (como get_session()) e injeta o resultado como argumento da função de rota.

Exemplo:

python
def get_session():
    return Session(engine)

@router.get("/")
def listar(session: Session = Depends(get_session)):
    ...
📤 Rotas com FastAPI
Criando um personagem:
python
@router.post("/", status_code=201)
def criar(dados: PersonagemCreate, session: Session = Depends(get_session)):
    novo = Personagem(**dados.dict())
    session.add(novo)
    session.commit()
    session.refresh(novo)
    return novo
Listando todos os personagens:
python
@router.get("/", response_model=List[Personagem])
def listar(session: Session = Depends(get_session)):
    return session.query(Personagem).all()
🧩 Tipagem e clareza
session: Session: é anotação de tipo

Facilita autocomplete, documentação Swagger e leitura

List[Objeto]: indica que a rota retorna uma lista de objetos daquele tipo

Optional[str] = None: campo opcional com valor padrão

🛠️ Dicas bônus
Sempre importe seus models no main.py pra garantir que as tabelas sejam registradas e criadas com create_all()

Nunca repita o nome de um campo (conflitos) em dois lugares com tipos diferentes

Use TYPE_CHECKING quando quiser evitar importações circulares entre modelos

Se quiser, posso gerar isso num .md, .txt ou até transformar em página bonita explicativa depois 😄

Prontinha pra próxima aventura? Vamos codar mais uma funcionalidade? 🚀💻📘


**dados.dict()	Converte um schema em argumentos para criar objeto ORM
response_model=List[...]	Define o formato da resposta da rota
session.query(Model).all()	Consulta todos os registros de uma tabela do banco


Isso aí é a essência do que tá rolando na linha Evento(**dados.dict()). Bora só reforçar com uma explicação bem visual pra cravar de vez esse entendimento:

🚦 Fluxo completo, passo a passo
Usuário envia JSON no corpo da requisição:

json
{
  "nome": "Davi é coroado",
  "descricao": "Unção como rei de Israel"
}
FastAPI converte esse JSON num objeto EventoCreate (um schema Pydantic):

python
dados = EventoCreate(nome="Davi é coroado", descricao="Unção como rei")
.dict() converte esse objeto num dicionário Python:

python
{
  "nome": "Davi é coroado",
  "descricao": "Unção como rei"
}
** desempacota o dicionário em argumentos nomeados:

python
Evento(nome="Davi é coroado", descricao="Unção como rei")
🔄 Esse objeto Evento é do tipo SQLModel, pronto pra ser salvo com:

python
session.add(novo)
session.commit()
🧪 Tradução mental da linha:
python
novo = Evento(**dados.dict())
“Crie um novo Evento, usando os campos recebidos da requisição como argumentos nomeados.”


Schemas entrada e saida de dados
Consultar uma informação é no banco de dados 



06/07/25 - duvidas 
- o que seria um token do tipo bearer? - quando uma função tem essa sintaxe por exemplo : "-> str" significa que ela vai retornar o tipo que esta na frente 
da setinha? nesse caso um string 

- pq precisamos decodificar o token? - o que de fato o token guarda nele? 

- o que essa linha faz? oauth2_scheme = OAuth2PasswordBearer(tokenUrl="/login") 

- pq payload? 

- essa parte pega o horario do momento em que o token é gerado? datetime.utcnow()

- pq precisamos copiar os dados e nao so usar eles como vem? dados_para_token = dados.copy()

 - o que jwt.encode e decode significa?

 respostas as duvidas:

 🔐 1. O que é um token do tipo Bearer?
Bearer é um tipo de token de autenticação usado em APIs. Quando o cliente (frontend ou Postman) envia uma requisição para uma rota protegida, ele envia o token assim:

Authorization: Bearer <seu_token_aqui>
“Bearer” significa literalmente “portador”

A API entende: “quem está portando esse token tem permissão para acessar”

➡️ 2. O que significa -> str?
Sim! Isso é uma anotação de tipo em Python.

python
def criar_token_jwt(dados: dict) -> str:
Significa:

“Essa função recebe um dict e retorna uma str.”

É só uma dica para o desenvolvedor (e para ferramentas como o VS Code), não muda o comportamento da função.

🔓 3. Por que precisamos decodificar o token?
Porque o token JWT é uma string codificada com informações dentro. Quando o usuário envia o token, precisamos ler o que tem dentro dele — como o ID do usuário, por exemplo.

Sem decodificar, ele seria só uma sequência de caracteres ilegível como:

eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
📦 4. O que o token guarda dentro dele?
Um token JWT guarda um “pacote” de informações chamado payload. No nosso caso, ele guarda:

json
{
  "sub": "5",         // ID do usuário
  "exp": 1720000000   // Data de expiração (timestamp)
}
Você pode guardar o que quiser dentro do token (com moderação), mas o mais comum é:

sub → subject (quem é o dono do token)

exp → expiration (quando o token expira)

🔐 5. O que faz essa linha?
python
oauth2_scheme = OAuth2PasswordBearer(tokenUrl="/login")
Ela cria um “esquema de autenticação” que:

Espera um token do tipo Bearer no cabeçalho

Usa a URL /login como ponto de entrada para obter o token

Depois, você usa isso em qualquer rota com:

python
token: str = Depends(oauth2_scheme)
E ele automaticamente extrai o token da requisição.

📦 6. Por que o nome payload?
“Payload” é um termo comum em computação que significa:

“A carga útil de uma mensagem” — ou seja, o conteúdo real que importa.

No JWT, o payload é a parte que guarda os dados do usuário (como o ID).

🕒 7. O que faz datetime.utcnow()?
Sim! Ele pega a data e hora atual em UTC (tempo universal coordenado). Usamos isso para definir quando o token vai expirar:

python
expiracao = datetime.utcnow() + timedelta(minutes=60)
Ou seja: o token vai expirar em 60 minutos a partir de agora.

📋 8. Por que usamos dados.copy()?
Porque vamos modificar o dicionário original adicionando a expiração:

python
dados_para_token = dados.copy()
dados_para_token.update({"exp": expiracao})
Se usássemos o dados original diretamente, estaríamos alterando o dicionário original que foi passado — o que pode causar efeitos colaterais indesejados.

🔐 9. O que significam jwt.encode e jwt.decode?
Essas são as funções da biblioteca python-jose que:

jwt.encode(...) → transforma um dicionário em um token JWT (string)

jwt.decode(...) → lê um token JWT e extrai o dicionário original

Exemplo:

python
token = jwt.encode({"sub": "5"}, SECRET_KEY, algorithm="HS256")
# token = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."

dados = jwt.decode(token, SECRET_KEY, algorithms=["HS256"])
# dados = {"sub": "5"}



porque preciso tranformar em string o id para mandar para o token ?  token = criar_token_jwt({"sub":str(usuario.id)})
🔍 Por que usamos str(usuario.id) no token?
A resposta curta é: porque o JWT espera que os valores no payload sejam serializáveis em JSON — e o JSON só aceita strings como chaves e valores simples como str, int, bool, etc.

🧠 O que é o sub?
sub é uma convenção no JWT que significa subject (quem é o dono do token)

Ele pode ser qualquer identificador único do usuário

A especificação do JWT recomenda que seja uma string

🔧 O que acontece se você mandar um int?
Na prática, o jwt.encode() até aceita um int como valor. Mas ao fazer isso:

python
token = criar_token_jwt({"sub": usuario.id})  # int
Você pode acabar com inconsistências depois, por exemplo:

Ao decodificar, o valor pode vir como string dependendo da lib

Comparações como int(payload["sub"]) == usuario.id podem falhar se não forem tratadas

✅ Por isso usamos:
python
token = criar_token_jwt({"sub": str(usuario.id)})
E depois, ao decodificar:

python
usuario_id = int(payload["sub"])
Assim você garante:

Que o token é compatível com o padrão JWT

Que o valor pode ser convertido de volta com segurança

🧪 Exemplo
python
# No login
token = criar_token_jwt({"sub": "5"})  # string

# Depois, ao usar o token
payload = jwt.decode(token, SECRET_KEY, algorithms=["HS256"])
usuario_id = int(payload["sub"])  # converte de volta pra int
✅ Em resumo
| Por quê? | Porque o JWT espera strings no payload, e sub é uma string por convenção | | O que ganhamos? | Compatibilidade, clareza e segurança na hora de decodificar |


Arrumando importação circular 
.

🧠 Em resumo:
O que fazer	Como
Evitar import circular	Use "NomeDaClasse" como string
Evitar from ... import ... no topo	Faça o import no final do arquivo
SQLModel entende isso?	Sim, perfeitamente!

Faça a importação tardia em apenas um dos arquivos sendo ele aquele que precisa realmente acessar a outra classe diretamente (sem usar string).

🧠 Como decidir onde fazer a importação tardia?
✅ Use "NomeDaClasse" como string nos dois arquivos:
Isso já resolve o problema de referência circular para o SQLModel.

🔁 Mas se você precisar usar a classe diretamente (ex: para tipagem, validação, ou testes), aí sim você faz a importação tardia no final do arquivo.
📌 No seu caso:
Em quiz.py:
Você pode deixar assim:

python
perguntas: List["Pergunta"] = Relationship(back_populates="quiz")
E no final do arquivo:

python
from app.models.pergunta import Pergunta  # ← importação tardia aqui
Em pergunta.py:
Você também pode usar:

python
quiz: Optional["Quiz"] = Relationship(back_populates="perguntas")
E não precisa importar Quiz diretamente se não estiver usando ela fora do relacionamento.

✅ Conclusão
Arquivo	Importação tardia necessária?	Por quê?
quiz.py	✅ Sim	Porque ele precisa saber o que é Pergunta para o relacionamento funcionar
pergunta.py	❌ Não	Só usa "Quiz" como string, o que já é suficiente

Declarar primeiro a logica estatica depois a dinamica (lembrar do que aconteceu com emblemas)